name: Deploy DishCompare App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        # Install any dependencies if needed
        echo "No dependencies to install for this static site"
    
    - name: Validate HTML
      run: |
        # Basic HTML validation
        if command -v tidy &> /dev/null; then
          tidy -q -e index.html
        else
          echo "HTML Tidy not available, skipping validation"
        fi
    
    - name: Check for broken links
      run: |
        # Check for any broken internal links
        echo "Checking for broken links..."
        # This is a placeholder - you could add link checking tools here

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to S3
      run: |
        # Create a unique bucket name
        BUCKET_NAME="dishcompare-app-$(date +%s)"
        
        # Create S3 bucket
        aws s3 mb s3://$BUCKET_NAME --region us-east-1
        
        # Configure for static website hosting
        aws s3 website s3://$BUCKET_NAME --index-document index.html --error-document index.html
        
        # Upload files
        aws s3 sync . s3://$BUCKET_NAME --exclude "*.git/*" --exclude "*.md" --exclude "*.yml" --exclude ".github/*"
        
        # Set bucket policy for public access
        cat > bucket-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "PublicReadGetObject",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::$BUCKET_NAME/*"
                }
            ]
        }
        EOF
        
        aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket-policy.json
        
        # Output the website URL
        echo "Website URL: http://$BUCKET_NAME.s3-website-us-east-1.amazonaws.com"
        echo "WEBSITE_URL=http://$BUCKET_NAME.s3-website-us-east-1.amazonaws.com" >> $GITHUB_ENV
    
    - name: Deploy to CloudFront (Optional)
      if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      run: |
        # Invalidate CloudFront cache
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
    
    - name: Comment deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Deployment successful!**\n\nYour app is now live at: ${{ env.WEBSITE_URL }}`
          })
